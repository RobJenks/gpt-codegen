You are designing a business process model following the BPMN 2.0 standard.  We will generate the model in two stages
1. Build a HIGH-LEVEL model by connecting together appropriate BPMN 2.0 elements
2. Build a DETAIL-LEVEL model by fleshing out this model and configuring each of the elements

Let us start with the HIGH-LEVEL model.  You can use any of the BPMN 2.0 elements in this component library:
```
Name: userTask
Description: A task that requires human intervention. Users interact with 'user tasks' via a task management system named eTask.
Usage: Use this task type when a task in the process flow requires manual action by a user. It typically involves human interaction, such as reviewing a document, approving a request, or entering data.
---
Name: serviceTask
Description: A task performed by an external software service. Typically a REST call to GET/PUT/POST/DELETE
Usage: Use service tasks when a task in the process flow can be automated and executed by a software service or application without direct human involvement. It often involves invoking external systems, performing calculations, or executing predefined functions.
---
Name: scriptTask
Description: A task that is performed based on scripted logic within the process.
Usage: Use script tasks when a task in the process flow requires custom logic or algorithmic processing. It is suitable when the logic can be localized within the process (i.e. does not require external data or systems, which is where a service task is more appropriate). It allows you to define Groovyscript scripts to perform specific actions or calculations within the process.
---
Name: businessRuleTask
Description: A task that executes a business rule or decision logic.
Usage: Use business rule tasks when a task in the process flow involves executing business rules or decision logic. It allows you to define and execute business rules or decision tables to determine the flow of the process based on certain conditions or criteria.
---
Name: sendTask
Description: A task that sends a message or signal to another process participant.
Usage: Use send tasks when a task in the process flow involves sending a message or signal to another process participant or external system. It initiates communication or triggers actions in other parts of the process or external systems.
---
Name: receiveTask
Description: A task that waits to receive a message or signal from another process participant.
Usage: Use receive tasks when a task in the process flow waits to receive a message or signal from another process participant or external system. It typically represents a waiting state until the expected message or signal is received.
---
Name: startEvent
Description: Represents the beginning of a process flow.
Usage: Place at the start of the process flow to indicate where it begins. Can have triggers like message, timer, or signal.  Only one per process.
---
Name: endEvent
Description: Denotes the completion of a process flow.
Usage: Place at the end of the process flow to indicate where it ends. Can have outcomes like message, error, or termination. At least one required per process.
---
Name: exclusiveGateway
Description: Allows branching based on a condition
Usage: Use when the process flow can branch to multiple nodes, but ONLY ONE of the paths can be followed. Each outgoing connection flow has a condition which must be met for the process to take that path.
---
Name: inclusiveGateway
Description: Allows branching based on a condition
Usage: Use when the process flow can branch to multiple nodes, and MULTIPLE paths can be followed simultaneously. Each outgoing connection flow has a condition which must be met for the process to take that path.
---
Name: parallelGateway
Description: Allows diverging into, or converging from, multiple parallel paths.
Usage: Use when the process flow should split into multiple parallel paths or merge from multiple parallel paths simultaneously. All outgoing sequence flows are followed in parallel, and all incoming sequence flows must complete before proceeding.
```

You should generate a simplified graph model by returning JSON that complies with the following schema.  You should NOT return a response in JSON Schema format.  Rather you should return raw JSON, which COMPLIES WITH this schema:
```
{
  "$id": "https://example.com/process-model.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Process model",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "nodes": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/element"
      }
    }
  },
  "$defs": {
    "element": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "$ref": "#/$defs/elementId",
          "description": "A unique identifier for this node.  Camelcase string based on the name."
        },
        "name": {
          "type": "string",
          "description": "A descriptive name for this node"
        },
        "elementType": {
          "type": "string",
          "description": "A BPMN 2.0 element type.  MUST match an item in the the given component library"
        },
        "description": {
          "type": [
            "string",
            "null"
          ],
          "description": "A short summary of this step in the process"
        },
        "properties": {
          "type": [
            "object",
            "null"
          ],
          "description": "Additional properties which can be provided as required"
        },
        "connectedTo": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/nodeConnection",
            "description": "The IDs of nodes which this node connects to. Outbound connections only. Only a single outbound connection is allowed unless this is an exclusiveGateway node"
          }
        }
      },
      "required": [
        "id",
        "name",
        "elementType"
      ]
    },
    "elementId": {
      "type": "string",
      "description": "A unique identifier for a node"
    },
    "nodeConnection": {
      "type": "object",
      "properties": {
        "targetNode": {
          "$ref": "#/$defs/elementId",
          "description": "The target node of this connection"
        },
        "description": {
          "type": ["string", "null"],
          "description": "A short text description of this connection"
        }
      },
      "required": [
        "targetNode"
      ]
    }
  }
}
```

Other requirements:
* You can only use elements specified in the component library above
* A node can only have ONE outbound connection, UNLESS it is an 'exclusiveGateway' node.  As a result, you should use exclusiveGateway nodes to handling branching. They should be placed after a result is calculated which you want to branch on
* Your process should begin with a Start Event and end with one or more End Events

You have previously generated the following model, which follows the schema above:
```
```
Create a detailed invoice processing process, including both manual and systematic steps. Include decision points and branches as necessary.
```
```
You should make the following updates to this model, and return the new full model as JSON (complying to the schema above):
```
Create a detailed invoice processing process, including both manual and systematic steps.  Include decision points and branches as necessary
```
Return ONLY the JSON process data, with no other explanation or commentary.