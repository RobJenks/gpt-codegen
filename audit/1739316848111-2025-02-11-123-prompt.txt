You are designing a business process model following the BPMN 2.0 standard.  We will generate the model in two stages
1. Build a HIGH-LEVEL model by connecting together appropriate BPMN 2.0 elements
2. Build a DETAIL-LEVEL model by fleshing out this model and configuring each of the elements

You have previously completed stage 1 by selecting elements from the provided library and linking them together.  You generated the high-level model below:
```
{"nodes":[{"id":"startEvent","name":"Start Event","elementType":"startEvent","description":"The beginning of the invoice processing process","connectedTo":[{"targetNode":"receiveInvoice","description":null}],"properties":null},{"id":"receiveInvoice","name":"Receive Invoice","elementType":"userTask","description":"User receives the invoice for processing","connectedTo":[{"targetNode":"validateInvoice","description":null}],"properties":null},{"id":"validateInvoice","name":"Validate Invoice","elementType":"serviceTask","description":"System validates the invoice details","connectedTo":[{"targetNode":"validationDecision","description":null}],"properties":null},{"id":"validationDecision","name":"Validation Decision","elementType":"exclusiveGateway","description":"Decision point for invoice validation","connectedTo":[{"targetNode":"approveInvoice","description":"Invoice is valid"},{"targetNode":"rejectInvoice","description":"Invoice is invalid"}],"properties":null},{"id":"approveInvoice","name":"Approve Invoice","elementType":"userTask","description":"User approves the valid invoice","connectedTo":[{"targetNode":"sendForPayment","description":null}],"properties":null},{"id":"rejectInvoice","name":"Reject Invoice","elementType":"userTask","description":"User rejects the invalid invoice","connectedTo":[{"targetNode":"endEvent","description":null}],"properties":null},{"id":"sendForPayment","name":"Send for Payment","elementType":"serviceTask","description":"System sends the approved invoice for payment processing","connectedTo":[{"targetNode":"endEvent","description":null}],"properties":null},{"id":"endEvent","name":"End Event","elementType":"endEvent","description":"The end of the invoice processing process","connectedTo":[],"properties":null}]}
```

We will now complete stage 2 and build the DETAILED model.  Below are the full definitions of each element you used in the high-level model:
```
Name: userTask
Description: A task that requires human intervention. Users interact with 'user tasks' via a task management system named eTask.
Usage: Use this task type when a task in the process flow requires manual action by a user. It typically involves human interaction, such as reviewing a document, approving a request, or entering data.
---
Name: serviceTask
Description: A task performed by an external software service. Typically a REST call to GET/PUT/POST/DELETE
Usage: Use service tasks when a task in the process flow can be automated and executed by a software service or application without direct human involvement. It often involves invoking external systems, performing calculations, or executing predefined functions.
---
Name: startEvent
Description: Represents the beginning of a process flow.
Usage: Place at the start of the process flow to indicate where it begins. Can have triggers like message, timer, or signal.  Only one per process.
---
Name: endEvent
Description: Denotes the completion of a process flow.
Usage: Place at the end of the process flow to indicate where it ends. Can have outcomes like message, error, or termination. At least one required per process.
---
Name: exclusiveGateway
Description: Allows branching based on a condition
Usage: Use when the process flow can branch to multiple nodes, but ONLY ONE of the paths can be followed. Each outgoing connection flow has a condition which must be met for the process to take that path.
```

You should now generate the DETAILED model.
* CAVEAT: Normally, you would fill out additional detail in each node based on the detailed component definitions above.  However we are not yet ready to do this
* For now, please therefore return the EXACT SAME MODEL you returned in the high-level phase

You should return the model as JSON complying to the following schema.  Do NOT return a schema.  Return JSON which complies with the schema:
```
{
  "$id": "https://example.com/process-model.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Process model",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "nodes": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/element"
      }
    }
  },
  "$defs": {
    "element": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "$ref": "#/$defs/elementId",
          "description": "A unique identifier for this node.  Camelcase string based on the name."
        },
        "name": {
          "type": "string",
          "description": "A descriptive name for this node"
        },
        "elementType": {
          "type": "string",
          "description": "A BPMN 2.0 element type.  MUST match an item in the the given component library"
        },
        "description": {
          "type": [
            "string",
            "null"
          ],
          "description": "A short summary of this step in the process"
        },
        "properties": {
          "type": [
            "object",
            "null"
          ],
          "description": "Additional properties which can be provided as required"
        },
        "connectedTo": {
          "type": "array",
          "items": {
            "$ref": "#/$defs/nodeConnection",
            "description": "The IDs of nodes which this node connects to. Outbound connections only. Only a single outbound connection is allowed unless this is an exclusiveGateway node"
          }
        }
      },
      "required": [
        "id",
        "name",
        "elementType"
      ]
    },
    "elementId": {
      "type": "string",
      "description": "A unique identifier for a node"
    },
    "nodeConnection": {
      "type": "object",
      "properties": {
        "targetNode": {
          "$ref": "#/$defs/elementId",
          "description": "The target node of this connection"
        },
        "description": {
          "type": ["string", "null"],
          "description": "A short text description of this connection"
        }
      },
      "required": [
        "targetNode"
      ]
    }
  }
}
```

NOTE: Now that you consider the detailed level and full component definitions, you may realize that you need to return to phase 1 and change the high-level structure.  E.g. if you need additional nodes in order to generate data for downstream tasks.  Please therefore return one of two possible responses:
1. The JSON complying to the schema above, if you successfully generate the model. Return ONLY the JSON and no other text or commentary
2. The phrase "RETURN_TO_HIGH_LEVEL: (REASON)" if you need to return to phase 1 and regenerate the high level model. Replace (REASON) with the reason(s) that you cannot generate a model at this time

Given the caveat mentioned above, you should always be following option 1 at this point.
