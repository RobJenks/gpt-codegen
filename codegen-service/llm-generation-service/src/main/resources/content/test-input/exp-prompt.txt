You are designing a business process model following the BPMN 2.0 standard.  This is your existing JSON process definition:
```
{"nodes":[{"id":"startProcess","name":"Start Process","elementType":"startEvent","description":null,"connectedTo":[{"targetNode":"endProcess","description":"End the process immediately"}],"properties":null},{"id":"endProcess","name":"End Process","elementType":"endEvent","description":null,"connectedTo":null,"properties":null}]}
```

You should take this existing JSON process definition (complying to the JSON schema below), and a description of updates to make to that process from this prompt.  You must update the existing process design by the following steps:
1. Parse the list of existing nodes based on the JSON schema, and interpret it as a series of steps including decision points and branches
2. Modify this series of steps as requested by the prompt
3. Convert your new series of steps to a list of nodes matching the schema.  Return this data as JSON complying to the JSON Schema below

The JSON schema you should use for parsing and generating the JSON data is as follows:
```
{
  "$id": "https://example.com/process-model.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Process model",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "nodes": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/element"
      }
    }
  },
  "$defs": {
    "element": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "id": {
          "$ref": "#/$defs/elementId",
          "description": "A unique identifier for this node.  Camelcase string based on the name."
        },
        "name": {
          "type": "string",
          "description": "A descriptive name for this node"
        },
        "elementType": {
          "description": "An element type valid in the BPMN 2.0 standard",
          "oneOf": [
            {
              "const": "startEvent",
              "description": "The start point of a process.  Only one is allowed"
            },
            {
              "const": "endEvent",
              "description": "An end point of a process.  May be more than one"
            },
            {
              "const": "userTask",
              "description": "A task issued to a user by the automation system"
            },
            {
              "const": "serviceTask",
              "description": "A programmatic call to an system by the process"
            },
            {
              "const": "scriptTask",
              "description": "Execution of some internal script logic within the process, for example to manipulate data from the previous step"
            },
            {
              "const": "businessRuleTask",
              "description": "A call to evaluate a DMN business decision table"
            },
            {
              "const": "manualTask",
              "description": "A task performed manually by a user"
            },
            {
              "const": "sendTask",
              "description": ""
            },
            {
              "const": "receiveTask",
              "description": ""
            },
            {
              "const": "callTask",
              "description": ""
            },
            {
              "const": "exclusiveGateway",
              "description": "A decision point which may branch in several direction based on the data received from the previous node.  Allows multiple output connections"
            },
            {
              "const": "inclusiveGateway",
              "description": "Acts as the target for multiple branches which converge at this point.  One output connection"
            }
          ]
        },
        "description": {
          "type": [ "string", "null" ],
          "description": "A short summary of this step in the process"
        },
        "properties": {
          "type": [ "object", "null" ],
          "description": "Additional properties which can be provided as required"
        },
        "connectedTo": {
          "type": [
            "array",
            "null"
          ]
        }
      },
      "allOf": [
        {
          "if": {
            "properties": {
              "elementType": {
                "const": "exclusiveGateway"
              }
            }
          },
          "then": {
            "properties": {
              "connectedTo": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/nodeConnection",
                  "description": "The IDs of all nodes which this exclusive gateway node connects to.  Outbound connections only.  This must comply with the BPMN 2.0 standard.  Most other element types cannot have multiple outgoing connections"
                }
              }
            }
          },
          "else": {
            "properties": {
              "connectedTo": {
                "type": [ "array", "null" ],
                "maxItems": 1,
                "items": {
                  "$ref": "#/$defs/nodeConnection",
                  "description": "The single node which this node connects to, if any.  Outbound connection only.  May be missing if no connections"
                }
              }
            }
          }
        }
      ],
      "required": [
        "id",
        "name",
        "elementType"
      ]
    },
    "elementId": {
      "type": "string",
      "description": "A unique identifier for a node"
    },
    "nodeConnection": {
      "type": "object",
      "properties": {
        "targetNode": {
          "$ref": "#/$defs/elementId",
          "description": "The target node of this connection"
        },
        "description": {
          "type": "string",
          "description": "A short text description of this connection"
        }
      },
      "required": [
        "targetNode"
      ]
    }
  }
}
```
Other requirements:
* If a node should connect to more than one target, you should use an exclusiveGateway node type to branch based upon the result of the previous step
* Your process should begin with a Start Event and end with one or more End Events
* You cannot use a generic "task" type.  Instead, choose the most appropriate BPMN 2.0 element type.  For example, a userTask for actions requested of a user, or a serviceTask for systematic calls to another system
* You can modify any parts of the existing process definition

The updates that you should make to the process definition before returning the new JSON data are as follows:
```
Create an expense reimbursement process from submission to payment, including validations
```
Return ONLY the JSON process data, with no other explanation or commentary.